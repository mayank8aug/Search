{"ast":null,"code":"var _jsxFileName = \"/Users/mayankkumar/Downloads/ReactSearch/src/components/Widgets/Widget.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchSynonyms, fetchAntonyms } from '../../actions';\nimport WidgetHeader from './WidgetHeader';\nimport Definitions from './Definitions';\nimport './Widget.css';\nconst Widget = React.memo(props => {\n  const {\n    data\n  } = props;\n  const {\n    tag,\n    tagText,\n    word,\n    defs\n  } = data;\n  const [showDefinition, setDefinitionShow] = useState(false);\n  const searchState = useSelector(state => state.search);\n  const {\n    antonyms,\n    synonyms\n  } = searchState;\n  const synonymsState = synonyms[word];\n  const antonymsState = antonyms[word];\n  useEffect(() => {\n    if (!synonymsState) {\n      useDispatch(fetchSynonyms(word));\n    }\n\n    if (!hasAntonyms) {\n      useDispatch(fetchAntonyms(word));\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(WidgetHeader, {\n    showDefinition: showDefinition,\n    tag: tag,\n    tagText: tagText,\n    word: word,\n    onClick: () => {\n      setDefinitionShow(!showDefinition);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }), showDefinition && /*#__PURE__*/React.createElement(Definitions, {\n    defs: defs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 32\n    }\n  }), hasAntonyms && hasAntonyms.length > 0 || synonymsState && synonymsState.length > 0 && /*#__PURE__*/React.createElement(SynonymsAntonyms, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }));\n});\nexport default Widget;","map":{"version":3,"sources":["/Users/mayankkumar/Downloads/ReactSearch/src/components/Widgets/Widget.js"],"names":["React","useState","useEffect","useDispatch","useSelector","fetchSynonyms","fetchAntonyms","WidgetHeader","Definitions","Widget","memo","props","data","tag","tagText","word","defs","showDefinition","setDefinitionShow","searchState","state","search","antonyms","synonyms","synonymsState","antonymsState","hasAntonyms","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,eAA7C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAO,cAAP;AAEA,MAAMC,MAAM,GAAGT,KAAK,CAACU,IAAN,CAAWC,KAAK,IAAI;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AACA,QAAM;AAAEE,IAAAA,GAAF;AAAOC,IAAAA,OAAP;AAAgBC,IAAAA,IAAhB;AAAsBC,IAAAA;AAAtB,MAA+BJ,IAArC;AACA,QAAM,CAACK,cAAD,EAAiBC,iBAAjB,IAAsCjB,QAAQ,CAAC,KAAD,CAApD;AACA,QAAMkB,WAAW,GAAGf,WAAW,CAACgB,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAA/B;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBJ,WAA/B;AACA,QAAMK,aAAa,GAAGD,QAAQ,CAACR,IAAD,CAA9B;AACA,QAAMU,aAAa,GAAGH,QAAQ,CAACP,IAAD,CAA9B;AACAb,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACsB,aAAL,EAAoB;AAChBrB,MAAAA,WAAW,CAACE,aAAa,CAACU,IAAD,CAAd,CAAX;AACH;;AACD,QAAI,CAACW,WAAL,EAAkB;AACdvB,MAAAA,WAAW,CAACG,aAAa,CAACS,IAAD,CAAd,CAAX;AACH;AACJ,GAPQ,EAON,EAPM,CAAT;AAQA,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,cAAc,EAAEE,cAA9B;AAA8C,IAAA,GAAG,EAAEJ,GAAnD;AAAwD,IAAA,OAAO,EAAEC,OAAjE;AAA0E,IAAA,IAAI,EAAEC,IAAhF;AAAsF,IAAA,OAAO,EAAE,MAAM;AAAEG,MAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AAAqC,KAA5I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKA,cAAc,iBAAI,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAED,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFvB,EAISU,WAAW,IAAIA,WAAW,CAACC,MAAZ,GAAqB,CAArC,IAA4CH,aAAa,IAAIA,aAAa,CAACG,MAAd,GAAuB,CAAzC,iBAC3C,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALR,CADJ;AAUH,CA1Bc,CAAf;AA4BA,eAAelB,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchSynonyms, fetchAntonyms } from '../../actions';\nimport WidgetHeader from './WidgetHeader';\nimport Definitions from './Definitions';\nimport './Widget.css';\n\nconst Widget = React.memo(props => {\n    const { data } = props;\n    const { tag, tagText, word, defs } = data;\n    const [showDefinition, setDefinitionShow] = useState(false);\n    const searchState = useSelector(state => state.search);\n    const { antonyms, synonyms } = searchState;\n    const synonymsState = synonyms[word];\n    const antonymsState = antonyms[word];\n    useEffect(() => {\n        if (!synonymsState) {\n            useDispatch(fetchSynonyms(word));\n        }\n        if (!hasAntonyms) {\n            useDispatch(fetchAntonyms(word));\n        }\n    }, []);\n    return (\n        <div className=\"search-item\">\n            <WidgetHeader showDefinition={showDefinition} tag={tag} tagText={tagText} word={word} onClick={() => { setDefinitionShow(!showDefinition); }} />\n            {showDefinition && <Definitions defs={defs} />}\n            {\n                (hasAntonyms && hasAntonyms.length > 0) || (synonymsState && synonymsState.length > 0) &&\n                <SynonymsAntonyms />\n            }\n        </div>\n    );\n});\n\nexport default Widget;"]},"metadata":{},"sourceType":"module"}