{"ast":null,"code":"var _jsxFileName = \"/Users/mayankkumar/Downloads/ReactSearch/src/components/Widgets/SynonymsAntonyms.js\";\nimport React, { useState } from 'react';\nconst SynonymsAntonyms = React.memo(props => {\n  const {\n    synonyms,\n    antonyms\n  } = props;\n  const tabsContent = {};\n\n  if (synonyms) {\n    tabsContent.synonyms = synonyms;\n  }\n\n  if (antonyms) {\n    tabsContent.antonyms = antonyms;\n  }\n\n  const [renderTab, updateRenderTab] = useState(tabsContent.synonyms ? 'synonyms' : 'antonyms');\n  const renderData = tabsContent[renderTab];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tabs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tabs-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, tabsContent.synonyms && /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => updateRenderTab(synonyms),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 42\n    }\n  }, \"Synonyms\"), tabsContent.antonyms && /*#__PURE__*/React.createElement(\"div\", {\n    onClick: () => updateRenderTab(antonyms),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 42\n    }\n  }, \"Antonyms\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tabs-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, renderData && renderData.map((data, index) => {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      key: index,\n      href: \"https://www.google.com\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 28\n      }\n    }, data.word);\n  })));\n});\nexport default SynonymsAntonyms;","map":{"version":3,"sources":["/Users/mayankkumar/Downloads/ReactSearch/src/components/Widgets/SynonymsAntonyms.js"],"names":["React","useState","SynonymsAntonyms","memo","props","synonyms","antonyms","tabsContent","renderTab","updateRenderTab","renderData","map","data","index","word"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,MAAMC,gBAAgB,GAAGF,KAAK,CAACG,IAAN,CAAWC,KAAK,IAAI;AACzC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBF,KAA/B;AACA,QAAMG,WAAW,GAAG,EAApB;;AACA,MAAIF,QAAJ,EAAc;AACVE,IAAAA,WAAW,CAACF,QAAZ,GAAuBA,QAAvB;AACH;;AACD,MAAIC,QAAJ,EAAc;AACVC,IAAAA,WAAW,CAACD,QAAZ,GAAuBA,QAAvB;AACH;;AACD,QAAM,CAACE,SAAD,EAAYC,eAAZ,IAA+BR,QAAQ,CAACM,WAAW,CAACF,QAAZ,GAAuB,UAAvB,GAAoC,UAArC,CAA7C;AACA,QAAMK,UAAU,GAAGH,WAAW,CAACC,SAAD,CAA9B;AAEA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,WAAW,CAACF,QAAZ,iBAAwB;AAAK,IAAA,OAAO,EAAE,MAAMI,eAAe,CAACJ,QAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAD7B,EAEKE,WAAW,CAACD,QAAZ,iBAAwB;AAAK,IAAA,OAAO,EAAE,MAAMG,eAAe,CAACH,QAAD,CAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAF7B,CADJ,eAKI;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKI,UAAU,IAAIA,UAAU,CAACC,GAAX,CAAe,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3C,wBAAO;AAAG,MAAA,GAAG,EAAEA,KAAR;AAAe,MAAA,IAAI,EAAC,wBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8CD,IAAI,CAACE,IAAnD,CAAP;AACH,GAFc,CADnB,CALJ,CADJ;AAcH,CA1BwB,CAAzB;AA4BA,eAAeZ,gBAAf","sourcesContent":["import React, { useState } from 'react';\n\nconst SynonymsAntonyms = React.memo(props => {\n    const { synonyms, antonyms } = props;\n    const tabsContent = {};\n    if (synonyms) {\n        tabsContent.synonyms = synonyms;\n    }\n    if (antonyms) {\n        tabsContent.antonyms = antonyms;\n    }\n    const [renderTab, updateRenderTab] = useState(tabsContent.synonyms ? 'synonyms' : 'antonyms');\n    const renderData = tabsContent[renderTab];\n\n    return (\n        <div className=\"tabs\">\n            <div className=\"tabs-header\">\n                {tabsContent.synonyms && <div onClick={() => updateRenderTab(synonyms)}>Synonyms</div>}\n                {tabsContent.antonyms && <div onClick={() => updateRenderTab(antonyms)}>Antonyms</div>}\n            </div>\n            <div className=\"tabs-content\">\n                {renderData && renderData.map((data, index) => {\n                    return <a key={index} href=\"https://www.google.com\">{data.word}</a>\n                })\n                }\n            </div>\n        </div>\n    );\n});\n\nexport default SynonymsAntonyms;"]},"metadata":{},"sourceType":"module"}